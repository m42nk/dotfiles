#!/bin/env python3

from pydymenu import rofi
from tempfile import gettempdir
import subprocess as sp
import yaml
import os

# {{{ Functions
def run (command):
    _out = sp.run(command, shell=True, stdout=sp.PIPE, stderr=sp.PIPE)
    return {
        'returncode': _out.returncode,
        'stdout': _out.stdout.decode().strip(),
        'stderr': _out.stderr.decode().strip()
    }

def notify(message, title='Projecting'):
    run(f"notify-send '{title}' '{message}'")

def log(message):
    notify(message)
    print(message)

def loadConfig(path):
    _f = open(path, 'r').read()
    return yaml.load(_f, Loader=yaml.FullLoader)
# }}}

# {{{ wmctrl

def activateWindowByName(name):
    _o = run(f"wmctrl -a '{name}'")['returncode'] == 0
    return _o

def activateWindowByClass(className):
    _o = run(f"wmctrl -x -a '{className}'")['returncode'] == 0
    return _o

# }}}

# {{{ brotab
def listBrowserTabs():
    _o = run("brotab list")['stdout']
    return [x.split('\t') for x in _o.split('\n')]

def findBrowserTab(url):
    tab = next((tab for tab in listBrowserTabs() if url.startswith(tab[2])), None)

    if not tab: return None
    return {
        'id': tab[0],
        'title': tab[1],
        'url': tab[2]
    }

def findBrowserTabByTitle(title):
    tab = next((tab for tab in listBrowserTabs() if title.startswith(tab[1])), None)

    if not tab: return None
    return {
        'id': tab[0],
        'title': tab[1],
        'url': tab[2]
    }

def activateBrowserTab(id):
    return run(f"brotab activate {id}")['returncode'] == 0

# }}}

#{{{ Config file

homedir = os.getenv("HOME")
projectPath = os.getenv('XDG_CONFIG_HOME') or f"{homedir}/.config"
projectPath = f"{projectPath}/projecting"

# Create config directory if it doesn't exist
if not os.path.exists(projectPath):
    os.makedirs(projectPath)

# }}}

#{{{ Running project

# Create tmp file to store running project
tmp = gettempdir() + "/projecting.running"

# Check if there is a running project
# if it exist, read it
running = open(tmp, "r").read().strip() if os.path.exists(tmp) else None
runningPath = None

if not running:
    # list files in config directory that ends with .yaml or .yml
    projects = [f.split('.')[0] for f in os.listdir(projectPath) if f.endswith(".yml")]
    selected = rofi(projects, prompt="Start projecting:")
    if selected:

        if selected[0] not in projects:
            log(f"{selected[0]} is not a valid project")
            exit(1)

        running = selected
        open(tmp, "w").write(selected[0].strip())
else:
    runningPath = [f for f in os.listdir(projectPath) if f.startswith(running)]
    runningPath = f"{projectPath}/{runningPath[0]}"

# }}}

# {{{ Parsing Yaml Config
config = loadConfig(runningPath)

# check if key exists
keys = ["programs"]
for key in keys:
    if key not in config:
        log(f"Key '{key}' not found in config file")
        exit(1)
# }}}

programs = list(config['programs'].keys()) + list(['Quit Project'])
selectedProgram = rofi(programs, prompt="Pick a program: ")

if not selectedProgram:
    print("No program selected")
    exit(1)

selectedProgram = selectedProgram[0]

if selectedProgram == 'Quit Project':
    if running: open(tmp, "w").write("")
    exit(0)

programConf = config['programs'][selectedProgram]
keys = list(programConf.keys())
found = False
tab = False

# finding
if 'browser' in keys:
    url = programConf['browser']['url']
    title = programConf['browser']['title']
    tab = findBrowserTab(url)

    if not tab:
        tab = findBrowserTabByTitle(title)


    if tab:
        activateBrowserTab(tab['id'])
        programConf['name'] = tab['title']
        found = True
    else:
        programConf['commands'] = [f"xdg-open {url}"]

if 'name' in keys:
    found = activateWindowByName(programConf['name'])

elif 'class' in keys :
    found = activateWindowByClass(programConf['class'])

else:
    exit(1)

# launching
if not found:
    log(f"Launching {selectedProgram}")
    [run(cmd) for cmd in programConf['commands']]

# vim:foldmethod=marker
