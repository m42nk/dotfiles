#!/usr/bin/env /home/m42nk/.asdf/shims/zx
// ^^^ workaround since zx is not found in PATH outside of terminal


/*
 * TODO:
 * - Add icons
 * - Refactor
 *    - Format output better
 *    - Add window icons
 *    - Make rofi meta formatting more readable
 * - Probably add jsdoc
 * - optimize perf
 */

$.verbose = false;

const LOG_PATH = `${os.homedir()}/.config/rofi/scripts/tabwin.log`;
const args = argv["_"];
const TABFS_DIR = `${os.homedir()}/Repos/TabFS/fs/mnt`;

$`echo $(date +"%Y-%m-%d %H:%M:%S") Called with ${args.join(" ")} >> ${LOG_PATH}`;

if (args.length === 0) {
  const [tabs, windows] = await Promise.all([getTabs(), getWindows()]);

  const tabsOutput = formatOutputTabs(tabs);
  const windowsOutput = formatOutputWindows(windows);

  const configs = [
    ["prompt", "Switcher"],
    ["no-custom", "true"],
  ];

  for (const config of configs) {
    echo(`\0${config[0]}\x1f${config[1]}\n`);
  }

  echo([windowsOutput, tabsOutput].join("\n"));
}

if (args.length > 0) {
  const rofiInfo = process.env["ROFI_INFO"];

  // await $`echo $ROFI_INFO >> ${LOG_PATH}`;
  // await $`echo $ROFI_DATA >> ${LOG_PATH}`;
  // await $`echo $ROFI_RETV >> ${LOG_PATH}`;

  if (rofiInfo.startsWith("window__")) {
    const windowId = rofiInfo.split("__")[1];
    activateWindow(windowId);
  }

  if (rofiInfo.startsWith("tab__")) {
    const tabId = rofiInfo.split("__")[1];
    activateTab(tabId);
  }
}

function activateTab(tabId) {
  const tabBasePath = path.join(TABFS_DIR, "tabs", "by-id", tabId);
  $`echo true > ${path.join(tabBasePath, "active")}`;
  $`echo true > ${path.join(tabBasePath, "window", "focused")}`;
}

function activateWindow(windowId) {
  $`wmctrl -ia ${windowId}`;
}

function formatOutputTabs(tabs) {
  const output = [];
  for (const tab of tabs) {
    const url = formatUrl(tab.url);
    const title = formatTitle(tab.title);
    const meta = `${tab.title} ${tab.id} ${tab.url}`;

    const options = [
      ["icon", "browser"],
      ["meta", meta],
      ["info", "tab__" + tab.id],
    ];

    const optionsString = "\0" + options.flat(Infinity).join("\x1f");

    output.push(`${url}\t${title}${optionsString}`);
  }

  return output.join("\n");
}

function formatUrl(url) {
  let urlObj = new URL(url);

  return (urlObj.hostname + urlObj.pathname).slice(0, 20) + "...";
}

function formatTitle(title) {
  return title.length > 20 ? title.slice(0, 40) + "..." : title;
}

function formatOutputWindows(windows) {
  const output = [];
  for (const w of windows) {
    const title = formatTitle(w.title);
    const meta = `${w.title} ${w.desktop} ${w.id} ${w.wmClass}`;

    const options = [
      ["icon", "desktop"],
      ["meta", meta],
      ["info", "window__" + w.id],
    ];

    const optionsString = "\0" + options.flat(Infinity).join("\x1f");

    output.push(`${w.wmClass}\t${title}${optionsString}`);
  }

  return output.join("\n");
}

async function getTabs() {
  const tabs = [];
  const tabsDir = path.join(TABFS_DIR, "tabs", "by-id");

  const ids = await $`ls ${tabsDir}`;

  for (const id of ids.stdout.split("\n")) {
    if (!id) continue;

    const tab = {
      id,
      title: "",
      url: "",
    };

    const raw_title = await $`cat ${path.join(tabsDir, id, "title.txt")}`;
    tab.title = raw_title.stdout.trim();

    const raw_url = await $`cat ${path.join(tabsDir, id, "url.txt")}`;
    tab.url = raw_url.stdout.trim();

    tabs.push(tab);
  }

  return tabs;
}

async function getWindows() {
  const windows = [];

  const rawWindows = await $`wmctrl -lx`;
  rawWindows.stdout.split("\n").forEach((line) => {
    if (!line) return;
    let [id, desktop, wmClass, _host, ...title] = line.split(/\s+/);
    title = title.join(" ");

    wmClass = wmClass.split(".");
    if (wmClass.length > 1) wmClass = wmClass[1];
    wmClass = wmClass
      .split("-")
      .map((s) => s[0].toUpperCase() + s.slice(1))
      .join(" ");

    if (desktop === "-1") return;

    windows.push({ id, desktop, wmClass, title });
  });

  return windows;
}

// vim: ft=javascript
